0a1,2
> // Autogenerated by genbin.go
> 
8a11,66
> func TestAddInt(t *testing.T) {
> 	type check struct {
> 		f   interface{}
> 		typ string
> 	}
> 
> 	checks := []check{
> 		{
> 			f: func(x, y int) bool {
> 				got := Add(reflect.ValueOf(x), reflect.ValueOf(y)).Interface().(int)
> 				want := x + y
> 				return reflect.DeepEqual(got, want)
> 			},
> 			typ: "int",
> 		},
> 		{
> 			f: func(x, y int8) bool {
> 				got := Add(reflect.ValueOf(x), reflect.ValueOf(y)).Interface().(int8)
> 				want := x + y
> 				return reflect.DeepEqual(got, want)
> 			},
> 			typ: "int8",
> 		},
> 		{
> 			f: func(x, y int16) bool {
> 				got := Add(reflect.ValueOf(x), reflect.ValueOf(y)).Interface().(int16)
> 				want := x + y
> 				return reflect.DeepEqual(got, want)
> 			},
> 			typ: "int16",
> 		},
> 		{
> 			f: func(x, y int32) bool {
> 				got := Add(reflect.ValueOf(x), reflect.ValueOf(y)).Interface().(int32)
> 				want := x + y
> 				return reflect.DeepEqual(got, want)
> 			},
> 			typ: "int32",
> 		},
> 		{
> 			f: func(x, y int64) bool {
> 				got := Add(reflect.ValueOf(x), reflect.ValueOf(y)).Interface().(int64)
> 				want := x + y
> 				return reflect.DeepEqual(got, want)
> 			},
> 			typ: "int64",
> 		},
> 	}
> 
> 	for _, tt := range checks {
> 		if err := quick.Check(tt.f, nil); err != nil {
> 			t.Error(tt.typ, err)
> 		}
> 	}
> }
> 
160,215d217
< 
< func TestAddInt(t *testing.T) {
< 	type check struct {
< 		f   interface{}
< 		typ string
< 	}
< 
< 	checks := []check{
< 		{
< 			f: func(x, y int) bool {
< 				got := Add(reflect.ValueOf(x), reflect.ValueOf(y)).Interface().(int)
< 				want := x + y
< 				return reflect.DeepEqual(got, want)
< 			},
< 			typ: "int",
< 		},
< 		{
< 			f: func(x, y int8) bool {
< 				got := Add(reflect.ValueOf(x), reflect.ValueOf(y)).Interface().(int8)
< 				want := x + y
< 				return reflect.DeepEqual(got, want)
< 			},
< 			typ: "int8",
< 		},
< 		{
< 			f: func(x, y int16) bool {
< 				got := Add(reflect.ValueOf(x), reflect.ValueOf(y)).Interface().(int16)
< 				want := x + y
< 				return reflect.DeepEqual(got, want)
< 			},
< 			typ: "int16",
< 		},
< 		{
< 			f: func(x, y int32) bool {
< 				got := Add(reflect.ValueOf(x), reflect.ValueOf(y)).Interface().(int32)
< 				want := x + y
< 				return reflect.DeepEqual(got, want)
< 			},
< 			typ: "int32",
< 		},
< 		{
< 			f: func(x, y int64) bool {
< 				got := Add(reflect.ValueOf(x), reflect.ValueOf(y)).Interface().(int64)
< 				want := x + y
< 				return reflect.DeepEqual(got, want)
< 			},
< 			typ: "int64",
< 		},
< 	}
< 
< 	for _, tt := range checks {
< 		if err := quick.Check(tt.f, nil); err != nil {
< 			t.Error(tt.typ, err)
< 		}
< 	}
< }
